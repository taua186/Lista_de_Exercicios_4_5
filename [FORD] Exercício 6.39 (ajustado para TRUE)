import numpy as np

def is_orthogonal_by_definition(matrix: np.ndarray) -> bool:
    """
    Checks if a matrix is orthogonal by verifying if P @ P.T is close to the identity matrix.

    Parameters:
        matrix (np.ndarray): The input square matrix.

    Returns:
        bool: True if the matrix is orthogonal, False otherwise.
    """
    n, m = matrix.shape
    if n != m:
        raise ValueError("The input matrix must be square.")

    identity_matrix = np.eye(n)
    product = matrix @ matrix.T

    # Use a slightly higher tolerance to account for numerical imprecision
    return np.allclose(product, identity_matrix, atol=1e-5)

def is_orthogonal_by_vectors(matrix: np.ndarray) -> bool:
    """
    Checks if a matrix is orthogonal by verifying if its column vectors are orthonormal.

    Parameters:
        matrix (np.ndarray): The input square matrix.

    Returns:
        bool: True if the column vectors of the matrix are orthonormal, False otherwise.
    """
    n, m = matrix.shape
    if n != m:
        raise ValueError("The input matrix must be square.")

    # Check if columns are unit vectors and orthogonal to each other
    for i in range(n):
        col_i = matrix[:, i]

        # Check if the vector has unit norm
        if not np.isclose(np.linalg.norm(col_i), 1, atol=1e-5):
            return False

        # Check orthogonality with other columns
        for j in range(i + 1, n):
            col_j = matrix[:, j]
            if not np.isclose(np.dot(col_i, col_j), 0, atol=1e-5):
                return False

    return True

# Matrices from the exercise
P1 = np.array([
    [-0.58835,  0.70206,  0.40119],
    [-0.78446, -0.37524, -0.49377],
    [-0.19612, -0.60523,  0.77152]
])

P2 = np.array([
    [-0.47624, -0.4264,  0.30151],
    [ 0.087932,  0.86603, -0.40825],
    [-0.87491, -0.26112,  0.86164]
])

# Testing the matrices
results = {
    "P1": {
        "by_definition": is_orthogonal_by_definition(P1),
        "by_vectors": is_orthogonal_by_vectors(P1)
    },
    "P2": {
        "by_definition": is_orthogonal_by_definition(P2),
        "by_vectors": is_orthogonal_by_vectors(P2)
    }
}

for matrix_name, result in results.items():
    print(f"Results for {matrix_name}:")
    print(f"  Orthogonal by definition: {result['by_definition']}")
    print(f"  Orthogonal by vectors: {result['by_vectors']}")
